{% extends "layout.jinja" %}
{% import "macro.jinja" as m %}

{% macro nice_types(counts) %}
  <span>{{counts[0]}}</span>,
  <span>{{counts[1]}}</span>,
  <span>{{counts[2]}}</span>
{% endmacro %}

{% block content %}
  <h1>
    Game #{{game_id}}: 
    {% if elodiff > 0 %}
      <a class'winner player1' href='{{url_for('player', username=player1)}}'>{{player1}}</a>
      <sub>vs</sub>
      <a class='loser player2' href='{{url_for('player', username=player2)}}'>{{player2}}</a>
      +{{ "%.3f"|format(elodiff)}}
    {% else %}
      <a class'winner player2' href='{{url_for('player', username=player2)}}'>{{player2}}</a>
      <sub>vs</sub>
      <a class='loser player1' href='{{url_for('player', username=player1)}}'>{{player1}}</a>
      +{{ "%.3f"|format(-elodiff)}}
    {% endif %}
  </h1>
  <p class='lead'>
    {{player1}} is currently rank #{{rank1}}, {{player2}} is currently ranked #{{rank2}}.
    <a href='/{{game_log_name}}'>raw gamelog</a>
  </p>
  <div class="row">
    <div class="span12">
      <h3>{{ num_rounds }} rounds played</h3>
      <svg id='timegraph'></svg>
      <svg id='planets'></svg>
      <table class='table rounds'>
        <thead>
          <tr>
            <th>Round</th>
            <th>Total Fleets</th>
            <th class='player1'>Planets<br>{{player1}}</th>
            <th class='player2'>Planets<br>{{player2}}</th>
            <th class='player1'>Ships<br>{{player1}}</th>
            <th class='player2'>Ships<br>{{player2}}</th>
            <th class='player1'>Production<br>{{player1}}</th>
            <th class='player2'>Production<br>{{player2}}</th>
            <th class='player1'>Fleets<br>{{player1}}</th>
            <th class='player2'>Fleets<br>{{player2}}</th>
          </tr>
        </thead>
        <tbody>
          {% for round in rounds %}
            <tr>
              <td>
                {% if loop.last %}
                  Endstand
                {% else %}
                  Round {{loop.index}}
                {% endif %}
              </td>
              <td>{{round.stats.num_fleets}}</td>

              <td>{{round.stats.owned_planets[1]}}</td>
              <td>{{round.stats.owned_planets[2]}}</td>

              <td>{{nice_types(round.stats.ships[1])}}</td>
              <td>{{nice_types(round.stats.ships[2])}}</td>

              <td>{{nice_types(round.stats.production[1])}}</td>
              <td>{{nice_types(round.stats.production[2])}}</td>

              <td>{{nice_types(round.stats.fleets[1])}}</td>
              <td>{{nice_types(round.stats.fleets[2])}}</td>
            </tr>
          {% endfor %}
        <tbody>
      </table>
    </div>
  </div>
{% endblock %}

{% block bottom_scripts %}
  {{ super() }}
  <script src="/static/js/d3.v3.js"></script>
  <script>
    var rounds = [
      {% for round in rounds %}
        {{round|tojson|safe}},
      {% endfor %}
    ];

    function make_timegraph() {
      var ships = [[], [], []];
      var max_ships = 0;

      for (var idx = 0; idx < rounds.length; idx++) {
        var round = rounds[idx];
        for (var player_id = 0; player_id <=2; player_id++) {
          var total_ships = 
            round.stats.fleets[player_id][0] + 
            round.stats.fleets[player_id][1] + 
            round.stats.fleets[player_id][2] +
            round.stats.ships[player_id][0] + 
            round.stats.ships[player_id][1] + 
            round.stats.ships[player_id][2];

          ships[player_id].push(total_ships);
          max_ships = Math.max(max_ships, total_ships);
        }
      }

      var height = 300;
      var width = 940;

      var svg = d3.select("#timegraph")
          .attr("width", width + "px")
          .attr("height", height + "px");

      var g = svg.append("svg:g");
          // .attr("transform", "translate(0, 200)");

      var x = d3.time.scale().domain([0, rounds.length]).range([0, width]);
      var y = d3.time.scale().domain([0, max_ships]).range([height, 0]);

      var line = d3.svg.line()
        .x(function(d,i) { return x(i); })
        .y(function(d) { return y(d); });

      g.append("svg:path")
        .attr("d", line(ships[0]))
        .attr("class", "npc");
      g.append("svg:path")
        .attr("d", line(ships[1]))
        .attr("class", "player1");
      g.append("svg:path")
        .attr("d", line(ships[2]))
        .attr("class", "player2");
    }
    
    function make_planets() {
      var height = 500;
      var width = 940;
      var planet_size = 40;
      var size_scale = 15;

      var svg = d3.select("#planets")
          .attr("width", width + "px")
          .attr("height", height + "px")
        .append("g")
          .attr("transform", "translate(" + width/2 + "," + height/2 + ")");

      var round = 3;
      var planets = rounds[round].data.planets;

      var color = d3.scale.category20();

      // https://gist.github.com/mbostock/1305111
      var planet = svg.selectAll(".planet")
          .data(planets.map(function(planet, idx) {
            return planet.production;
          }))
        .enter().append("svg:svg")
          .attr("class", "planet")
          .attr("width", planet_size)
          .attr("height", planet_size)
          .attr("background-color", "red")
          .attr("x", function(planet, i) {
            return planets[i].x * -size_scale - planet_size/2;
          })
          .attr("y", function(planet, i) {
            return planets[i].y * size_scale - planet_size/2;
          })
          .append("svg:g")
          .attr("transform", "translate(" + planet_size/2 + "," + planet_size/2 + ")");

      planet.selectAll("path")
          .data(d3.layout.pie())
        .enter().append("svg:path")
          .attr("d", d3.svg.arc()
            .innerRadius(0)
            .outerRadius(planet_size/2))
          .style("fill", function(d, i) { return color(i); });

      // g.selectAll("path")
      //   .data(d3.layout.pie([1,2,3]))
      //   .enter().append("svg:path")
      //     .attr("d", d3.svg.arc()
      //       .innerRadius(4)
      //       .outerRadius(10))
      //     .style("fill", "red");


      // for (var idx = 0; idx < planets.length; idx++) {
      //   var planet = planets[idx];
      //   // var pie = d3.layout.pie(planet.production + [1]);
      //   var pie = d3.layout.pie([1,2,3]);

      //   var arc = d3.svg.arc()
      //     .innerRadius(10)
      //     .outerRadius(20);

      //   g.append("svg:path")
      //     .attr("fill", "red")
      //     .attr("d", arc(pie))
      //     .attr("transform", "translate(" + planet.x + "," + planet.y +")");
      // }
    }

    make_timegraph();
    make_planets();
  </script>
{% endblock %}
