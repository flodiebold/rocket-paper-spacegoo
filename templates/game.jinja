{% extends "layout.jinja" %}
{% import "macro.jinja" as m %}

{% macro nice_types(counts) %}
  <span>{{counts[0]}}</span>,
  <span>{{counts[1]}}</span>,
  <span>{{counts[2]}}</span>
{% endmacro %}

{% block content %}
  <h1>
    Game #{{game_id}}: 
    {% if elodiff > 0 %}
      <a class='winner player1' href='{{url_for('player', username=player1)}}'>{{player1}}</a>
      <sub>vs</sub>
      <a class='loser player2' href='{{url_for('player', username=player2)}}'>{{player2}}</a>
      +{{ "%.3f"|format(elodiff)}}
    {% else %}
      <a class='winner player2' href='{{url_for('player', username=player2)}}'>{{player2}}</a>
      <sub>vs</sub>
      <a class='loser player1' href='{{url_for('player', username=player1)}}'>{{player1}}</a>
      +{{ "%.3f"|format(-elodiff)}}
    {% endif %}
  </h1>
  <p class='lead'>
    {{player1}} is currently rank #{{rank1}}, {{player2}} is currently ranked #{{rank2}}.
    <a href='/{{game_log_name}}'>raw gamelog</a>
  </p>
  <div class="row">
    <div class="span12">
      <!-- <h3>{{ num_rounds }} rounds played</h3> -->
      <table class='table rounds fixed-header'>
      <div id='timegraph'></div>
      <canvas width="0" height="0" id='planets'></div>
        <thead class='header'>
          <tr>
            <th>Round</th>
            <th>Total Fleets</th>
            <th class='player1'>Planets<br>{{player1}}</th>
            <th class='player2'>Planets<br>{{player2}}</th>
            <th class='player1'>Ships<br>{{player1}}</th>
            <th class='player2'>Ships<br>{{player2}}</th>
            <th class='player1'>Production<br>{{player1}}</th>
            <th class='player2'>Production<br>{{player2}}</th>
            <th class='player1'>Fleets<br>{{player1}}</th>
            <th class='player2'>Fleets<br>{{player2}}</th>
          </tr>
        </thead>
        <tbody>
          {% set round = rounds[-1] %}
            <tr>
              <td id="round">
                  Endstand
              </td>
              <td id="fleet_total">{{round.stats.num_fleets}}</td>

              <td id="planets_player1">{{round.stats.owned_planets[1]}}</td>
              <td id="planets_player2">{{round.stats.owned_planets[2]}}</td>

              <td id="ships_player1">{{nice_types(round.stats.ships[1])}}</td>
              <td id="ships_player2">{{nice_types(round.stats.ships[2])}}</td>

              <td id="production_player1">{{nice_types(round.stats.production[1])}}</td>
              <td id="production_player2">{{nice_types(round.stats.production[2])}}</td>

              <td id="fleets_player1">{{nice_types(round.stats.fleets[1])}}</td>
              <td id="fleets_player2">{{nice_types(round.stats.fleets[2])}}</td>
            </tr>
        <tbody>
      </table>
    </div>
  </div>
{% endblock %}

{% block bottom_scripts %}
  {{ super() }}
  <script src="/static/js/flot/jquery.js"></script>
  <script src="/static/js/flot/jquery.flot.js"></script>
  <script src="/static/js/flot/jquery.flot.crosshair.js"></script>
  <script src="/static/js/table-fixed-header.js"></script>
  <script>
    $('table.fixed-header').fixedHeader();

    var rounds = [
      {% for round in rounds %}
        {{round|tojson|safe}},
      {% endfor %}
    ];

    var current_round = 0;

    var redrawTimeout = null;
    var redraw = function () {
      console.log("redraw called before defined")
    };

    function make_timegraph() {
      var height = 200;
      var width = 940;

      var data = [
        { label: 'neutral'
        , color: 'lightgrey'
        , data: []
        },
        { label: '{{player1}}'
        , color: 'steelblue'
        , data: []
        },
        { label: '{{player2}}'
        , color: 'red'
        , data: []
        }]

      for (var idx = 0; idx < rounds.length; idx++) {
        var round = rounds[idx];
        for (var player_id = 0; player_id <=2; player_id++) {
          var total_ships = 
            round.stats.fleets[player_id][0] + 
            round.stats.fleets[player_id][1] + 
            round.stats.fleets[player_id][2] +
            round.stats.ships[player_id][0] + 
            round.stats.ships[player_id][1] + 
            round.stats.ships[player_id][2];

          data[player_id].data.push([idx, total_ships]);
        }
      }

      $("#timegraph").width(width).height(height);
      $.plot($("#timegraph"), data, {
          crosshair: {
            mode: "x"
          },
          grid: {
            hoverable: true,
            autoHighlight: false
          },
      });
      $("#timegraph").bind("plothover",  function (event, pos, item) {
          current_round = Math.floor(pos.x);
          if (current_round < 0) current_round = 0;
          if (current_round >= rounds.length) current_round = rounds.length -1;

          if (!redrawTimeout) {
            redrawTimeout = setTimeout(redraw, 50);
          }
      });
    }

    function make_planets() {
      var height = 500;
      var width = 940;
      var size_scale = 15;
      var planet_canvas_size = 50;
      var fleet_canvas_size = 5;
      var max_production = 18;
      var star_size = 4;


      // Off-screen canvas for stars
      var stars_buffer = document.createElement('canvas');
      stars_buffer.width = width;
      stars_buffer.height = height;
      var c = stars_buffer.getContext("2d");
      var n_stars = Math.floor(50 + Math.random()*50);
      for (var n = 0; n < n_stars; n++) {
	var x = Math.random()*width;
	var y = Math.random()*height;
	var r = Math.random() * star_size / 2;
	c.beginPath();
	c.fillStyle = "white";
	c.moveTo(x, y);
	c.arc(x, y, r, 0, 2*Math.PI, false);
	c.fill();
      }


      // Off-screen canvas for planets
      var planets_buffer = document.createElement('canvas');
      planets_buffer.width = width;
      planets_buffer.height = height;
      var bc = planets_buffer.getContext("2d");
      bc.translate(width/2, height/2);

      var planets = rounds[0].data.planets;
      for (var idx = 0; idx < planets.length; idx++) {
        var planet = planets[idx];
        var total_production = planet.production[0] + planet.production[1] + planet.production[2];
	var r = Math.sqrt(total_production / (max_production*2)) * planet_canvas_size;
        var alpha = - Math.PI/2;
        for (var i = 0; i < 3; i++) {
          var beta = alpha + 2 * Math.PI * (planet.production[i]/total_production);
          bc.fillStyle = ["#DDD", "#AAA", "#999"][i];
          bc.beginPath();
          bc.moveTo(
              planet.x * -size_scale,
              planet.y * size_scale
              );
          bc.arc(
              planet.x * -size_scale,
              planet.y * size_scale,
              r,
              alpha,
              beta,
              false
              );
          bc.closePath();
          bc.fill();
          alpha = beta;
        }
      }

      // The proper canvas
      var canvas = document.getElementById("planets");
      canvas.width = width;
      canvas.height = height;
      var c = canvas.getContext("2d");
      c.translate(width/2, height/2);

      // Varying content
      redraw = function() {
        c.clearRect(-canvas.width/2,-canvas.height/2,canvas.width,canvas.height);
        c.drawImage(stars_buffer, -canvas.width/2, -canvas.height/2);

        var planets = rounds[current_round].data.planets;
        for (var idx = 0; idx < planets.length; idx++) {
          var planet = planets[idx];
          var total_production = planet.production[0] + planet.production[1] + planet.production[2];
	  var r = Math.sqrt(total_production / (max_production*2)) * (planet_canvas_size * 1.1 + 6);
          if (planet.owner_id != 0) {
            c.beginPath();
            c.fillStyle = ["invalid", "steelblue", "red"][planet.owner_id];
            c.moveTo(
                planet.x * -size_scale,
                planet.y * size_scale
                );
            c.arc(
                planet.x * -size_scale,
                planet.y * size_scale,
                r, 0, 2*Math.PI, false);
            c.fill();
          }
        }

        c.drawImage(planets_buffer, -canvas.width/2, -canvas.height/2);

        var fleets = rounds[current_round].data.fleets;
        for (var idx = 0; idx < fleets.length; idx++) {
          var fleet = fleets[idx];
          var total_ships = fleet.ships[0] + fleet.ships[1] + fleet.ships[2];

          var dx = planets[fleet.target].x - planets[fleet.origin].x;
          var dy = planets[fleet.target].y - planets[fleet.origin].y;
          var d = Math.ceil(Math.sqrt(dx * dx + dy * dy));
          var tl = fleet.eta - current_round;
          var done = 1 - (tl / d);
          var x = planets[fleet.origin].x + done * dx;
          var y = planets[fleet.origin].y + done * dy;

	  var r = Math.sqrt(total_ships / (max_production*2)) * fleet_canvas_size;

          c.beginPath();
          c.fillStyle = ["invalid", "steelblue", "red"][fleet.owner_id];
          c.moveTo(x * - size_scale, y * size_scale );
          c.arc( x * -size_scale, y * size_scale, r, 0, 2*Math.PI, false);
          c.fill();
        }

	$('#round')             .text(current_round == rounds.length -1 ?
	                              'Endzustand' : current_round);
	$('#fleet_total')       .text(rounds[current_round].stats.num_fleets);
	$('#planets_player1')   .text(rounds[current_round].stats.owned_planets[1]);
	$('#planets_player2')   .text(rounds[current_round].stats.owned_planets[2]);
	$('#ships_player1')     .text(rounds[current_round].stats.ships[1]);
	$('#ships_player2')     .text(rounds[current_round].stats.ships[2]);
	$('#production_player1').text(rounds[current_round].stats.production[1]);
	$('#production_player2').text(rounds[current_round].stats.production[2]);
	$('#fleets_player1')    .text(rounds[current_round].stats.fleets[1]);
	$('#fleets_player2')    .text(rounds[current_round].stats.fleets[2]);

        redrawTimeout = null;
      }
      redraw();
    }

    make_timegraph();
    make_planets();
  </script>
{% endblock %}
