{% extends "layout.jinja" %}
{% import "macro.jinja" as m %}

{% macro nice_types(counts) %}
  <span>{{counts[0]}}</span>,
  <span>{{counts[1]}}</span>,
  <span>{{counts[2]}}</span>
{% endmacro %}

{% block content %}
  <h1>
    Game #{{game_id}}: 
    {% if elodiff > 0 %}
      <a class='winner player1' href='{{url_for('player', username=player1)}}'>{{player1}}</a>
      <sub>vs</sub>
      <a class='loser player2' href='{{url_for('player', username=player2)}}'>{{player2}}</a>
      +{{ "%.3f"|format(elodiff)}}
    {% else %}
      <a class='winner player2' href='{{url_for('player', username=player2)}}'>{{player2}}</a>
      <sub>vs</sub>
      <a class='loser player1' href='{{url_for('player', username=player1)}}'>{{player1}}</a>
      +{{ "%.3f"|format(-elodiff)}}
    {% endif %}
  </h1>
  <p class='lead'>
    {{player1}} is currently rank #{{rank1}}, {{player2}} is currently ranked #{{rank2}}.
    <a href='/{{game_log_name}}'>raw gamelog</a>
  </p>
  <div class="row">
    <div class="span12">
      <h3>{{ num_rounds }} rounds played</h3>
      <svg id='timegraph'></svg>
      <canvas id='planets'></div>
      <table class='table rounds fixed-header'>
        <thead class='header'>
          <tr>
            <th>Round</th>
            <th>Total Fleets</th>
            <th class='player1'>Planets<br>{{player1}}</th>
            <th class='player2'>Planets<br>{{player2}}</th>
            <th class='player1'>Ships<br>{{player1}}</th>
            <th class='player2'>Ships<br>{{player2}}</th>
            <th class='player1'>Production<br>{{player1}}</th>
            <th class='player2'>Production<br>{{player2}}</th>
            <th class='player1'>Fleets<br>{{player1}}</th>
            <th class='player2'>Fleets<br>{{player2}}</th>
          </tr>
        </thead>
        <tbody>
          {% for round in rounds %}
            <tr>
              <td>
                {% if loop.last %}
                  Endstand
                {% else %}
                  Round {{loop.index}}
                {% endif %}
              </td>
              <td>{{round.stats.num_fleets}}</td>

              <td>{{round.stats.owned_planets[1]}}</td>
              <td>{{round.stats.owned_planets[2]}}</td>

              <td>{{nice_types(round.stats.ships[1])}}</td>
              <td>{{nice_types(round.stats.ships[2])}}</td>

              <td>{{nice_types(round.stats.production[1])}}</td>
              <td>{{nice_types(round.stats.production[2])}}</td>

              <td>{{nice_types(round.stats.fleets[1])}}</td>
              <td>{{nice_types(round.stats.fleets[2])}}</td>
            </tr>
          {% endfor %}
        <tbody>
      </table>
    </div>
  </div>
{% endblock %}

{% block bottom_scripts %}
  {{ super() }}
  <script src="/static/js/d3.v3.js"></script>
  <script>
    $('table.fixed-header').fixedHeader();

    var rounds = [
      {% for round in rounds %}
        {{round|tojson|safe}},
      {% endfor %}
    ];

    var current_round = 0;

    function make_timegraph() {
      var ships = [[], [], []];
      var max_ships = 0;

      for (var idx = 0; idx < rounds.length; idx++) {
        var round = rounds[idx];
        for (var player_id = 0; player_id <=2; player_id++) {
          var total_ships = 
            round.stats.fleets[player_id][0] + 
            round.stats.fleets[player_id][1] + 
            round.stats.fleets[player_id][2] +
            round.stats.ships[player_id][0] + 
            round.stats.ships[player_id][1] + 
            round.stats.ships[player_id][2];

          ships[player_id].push(total_ships);
          max_ships = Math.max(max_ships, total_ships);
        }
      }

      var height = 300;
      var width = 940;

      var svg = d3.select("#timegraph")
          .attr("width", width + "px")
          .attr("height", height + "px");

      var g = svg.append("svg:g");
          // .attr("transform", "translate(0, 200)");

      var x = d3.scale.linear().domain([0, rounds.length]).range([0, width]);
      var y = d3.scale.linear().domain([0, max_ships]).range([height, 0]);

      var line = d3.svg.line()
        .x(function(d,i) { return x(i); })
        .y(function(d) { return y(d); });

      g.append("svg:path")
        .attr("d", line(ships[0]))
        .attr("class", "npc");
      g.append("svg:path")
        .attr("d", line(ships[1]))
        .attr("class", "player1");
      g.append("svg:path")
        .attr("d", line(ships[2]))
        .attr("class", "player2");
    }

    function make_planets() {
      var height = 500;
      var width = 940;
      var size_scale = 15;
      var planet_canvas_size = 100;
      var fleet_canvas_size = 2;
      var max_production = 18;

      // Off-screen canvas for planets
      var planets_buffer = document.createElement('canvas');
      planets_buffer.width = width;
      planets_buffer.height = height;
      var bc = planets_buffer.getContext("2d");
      bc.translate(width/2, height/2);

      var planets = rounds[0].data.planets;
      for (var idx = 0; idx < planets.length; idx++) {
        var planet = planets[idx];
        var total_production = planet.production[0] + planet.production[1] + planet.production[2];
        var alpha = - Math.PI/2;
        for (var i = 0; i < 3; i++) {
          var beta = alpha + 2 * Math.PI * (planet.production[i]/total_production);
          bc.fillStyle = ["#DDD", "#AAA", "#999"][i];
          bc.beginPath();
          bc.moveTo(
              planet.x * -size_scale,
              planet.y * size_scale
              );
          bc.arc(
              planet.x * -size_scale,
              planet.y * size_scale,
              (total_production/(max_production*2) * planet_canvas_size),
              alpha,
              beta,
              false
              );
          bc.closePath();
          bc.fill();
          alpha = beta;
        }
      }

      // The proper canvas
      var canvas = document.getElementById("planets");
      canvas.width = width;
      canvas.height = height;
      var c = canvas.getContext("2d");
      c.translate(width/2, height/2);

      // Varying content
      var redraw = function() {
        c.clearRect(-canvas.width/2,-canvas.height/2,canvas.width,canvas.height);

        var planets = rounds[current_round].data.planets;
        for (var idx = 0; idx < planets.length; idx++) {
          var planet = planets[idx];
          var total_production = planet.production[0] + planet.production[1] + planet.production[2];
          if (planet.owner_id != 0) {
            c.beginPath();
            c.fillStyle = ["invalid", "steelblue", "red"][planet.owner_id];
            c.moveTo(
                planet.x * -size_scale,
                planet.y * size_scale
                );
            c.arc(
                planet.x * -size_scale,
                planet.y * size_scale,
                (total_production/(max_production*2) * (planet_canvas_size * 1.3 + 6)),
                0, 2*Math.PI, false);
            c.fill();
          }
        }

        c.drawImage(planets_buffer, -canvas.width/2, -canvas.height/2);

        var fleets = rounds[current_round].data.fleets;
        for (var idx = 0; idx < fleets.length; idx++) {
          var fleet = fleets[idx];
          var total_ships = fleet.ships[0] + fleet.ships[1] + fleet.ships[2];

          var dx = planets[fleet.target].x - planets[fleet.origin].x;
          var dy = planets[fleet.target].y - planets[fleet.origin].y;
          var d = Math.ceil(Math.sqrt(dx * dx + dy * dy));
          var tl = fleet.eta - current_round;
          var done = 1 - (tl / d);
          var x = planets[fleet.origin].x + done * dx;
          var y = planets[fleet.origin].y + done * dy;

          c.beginPath();
          c.fillStyle = ["invalid", "steelblue", "red"][fleet.owner_id];
          c.moveTo(x * - size_scale, y * size_scale );
          c.arc(
              x * -size_scale,
              y * size_scale,
              (total_ships/(max_production*2) * (fleet_canvas_size)),
              0, 2*Math.PI, false);
          c.fill();
        }
      }
      redraw();
        
      // Event
      var x = d3.scale.linear().domain([0, rounds.length]).range([0, width]);
      d3.select("#timegraph")
        .on("mousemove", function () {
          current_round = Math.floor(x.invert(d3.mouse(this)[0]));
          redraw();
      });
    }

    make_timegraph();
    make_planets();
  </script>
{% endblock %}
